{
	"info": {
		"_postman_id": "cf90b57b-63fa-4658-857e-0f55029a433e",
		"name": "_OTST_TS_OB_RFND_5_ReasonCode",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14251770"
	},
	"item": [
		{
			"name": "01. Offer (offerSearchCriteria) BILETO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"pm.test('Successfully received offers', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"var offer = jsonData.offers[0];",
							"validateOfferConformsToOfferSearchCriteria(offer);",
							"",
							"validateOfferResponse(",
							"JSON.parse(pm.globals.get(OFFER.PASSENGER_SPECIFICATIONS)), ",
							"JSON.parse(pm.globals.get(OFFER.SEARCH_CRITERIA)), ",
							"pm.globals.get(OFFER.FULFILLMENT_OPTIONS), ",
							"jsonData.offers, ",
							"jsonData.trips, ",
							"pm.globals.get(\"SCENARIO_TYPE\"));",
							"",
							"displayOfferResponse(jsonData);",
							"",
							"pm.globals.set(\"offer_id\", offer.offerId);",
							"pm.globals.set(\"offer\", offer);",
							"pm.globals.set(\"offers\", jsonData.offers);",
							"",
							"var reservationOfferPart = offer.reservationOfferParts[0];",
							"pm.globals.set(\"reservation_id\", reservationOfferPart.id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"console.log(\"------------------------------------------------------\");\r",
							"console.log(\"|   Executing test : _OTST_TS_OB_RFND_5_ReasonCode   |\");\r",
							"console.log(\"------------------------------------------------------\");\r",
							"\r",
							"console.log(\"Executing request : \" + pm.info.requestName);\r",
							"\r",
							"/*\r",
							"osdmTripSearchCriteria([\r",
							"    new TripLegDefinition(\r",
							"        pm.globals.get(\"leg_1_start_stop_place_ref\"),\r",
							"        pm.globals.get(\"leg_1_start_datetime\"),\r",
							"        pm.globals.get(\"leg_1_end_stop_place_ref\"),\r",
							"        pm.globals.get(\"leg_1_end_datetime\"),\r",
							"        pm.globals.get(\"leg_1_product_category_ref\"),\r",
							"        pm.globals.get(\"leg_1_product_category_name\"),\r",
							"        pm.globals.get(\"leg_1_product_category_short_name\"),\r",
							"        pm.globals.get(\"leg_1_vehicle_number\"),\r",
							"        pm.globals.get(\"leg_1_operator_code\")\r",
							"    )\r",
							"]);\r",
							"*/\r",
							"osdmTripSearchCriteria([\r",
							"    new TripLegDefinition(\r",
							"        pm.globals.get(\"TRIP_REQUIREMENT_1_TRIP_origin\"),\r",
							"        pm.globals.get(\"TRIP_REQUIREMENT_1_TRIP_start_datetime\"),\r",
							"        pm.globals.get(\"TRIP_REQUIREMENT_1_TRIP_destination\"),\r",
							"        pm.globals.get(\"TRIP_REQUIREMENT_1_TRIP_end_datetime\"),\r",
							"        pm.globals.get(\"leg_1_product_category_ref\"),\r",
							"        pm.globals.get(\"leg_1_product_category_name\"),\r",
							"        pm.globals.get(\"leg_1_product_category_short_name\"),\r",
							"        pm.globals.get(\"TRIP_REQUIREMENT_1_TRIP_vehicle_number\"),\r",
							"        pm.globals.get(\"TRIP_REQUIREMENT_1_TRIP_operator_code\")\r",
							"    )\r",
							"]);\r",
							"\r",
							"osdmAnonymousPassengerSpecifications(1);\r",
							"\r",
							"osdmOfferSearchCriteria(\r",
							"    pm.globals.get(OFFER.SEARCH_CRITERIA_CURRENCY),\r",
							"    null,\r",
							"    [OfferPartType.RESERVATION],\r",
							"    null,\r",
							"    [ServiceClassType.STANDARD],\r",
							"    [TravelClass.SECOND],\r",
							"    null\r",
							");\r",
							"\r",
							"osdmFulfillmentOptions([\r",
							"    new FulfillmentOption(FulfillmentOptionType.ETICKET, FulfillmentMediaType.PDF_A4)\r",
							"]);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objectType\": \"OfferCollectionRequest\",\n    \"tripSearchCriteria\": {{offer_trip_search_criteria}},\n    \"anonymousPassengerSpecifications\": {{offer_passenger_specifications}},\n    \"offerSearchCriteria\": {{offer_search_criteria}},\n    \"requestedFulfillmentOptions\": {{offer_fulfillment_options}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/offers",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "01. Offer (offerSearchSpecifications) SQILLS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"pm.test('Successfully received offers', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"var offer = jsonData.offers[0];",
							"validateOfferConformsToOfferSearchCriteria(offer);",
							"",
							"validateOfferResponse(",
							"JSON.parse(pm.globals.get(OFFER.TRIP_SPECIFICATIONS)), ",
							"JSON.parse(pm.globals.get(OFFER.PASSENGER_SPECIFICATIONS)), ",
							"JSON.parse(pm.globals.get(OFFER.SEARCH_CRITERIA)), ",
							"pm.globals.get(OFFER.FULFILLMENT_OPTIONS), ",
							"jsonData.offers, ",
							"jsonData.trips, ",
							"pm.globals.get(\"SCENARIO_TYPE\"));",
							"",
							"",
							"pm.globals.set(\"offer_id\", offer.offerId);",
							"pm.globals.set(\"offers\", jsonData.offers);",
							"",
							"//var reservationOfferPart = offer.reservationOfferParts[0];",
							"// pm.globals.set(\"reservation_id\", reservationOfferPart.id);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"osdmTripSpecification([\r",
							"    new TripLegDefinition(\r",
							"        pm.globals.get(\"leg_1_start_stop_place_ref\"),\r",
							"        pm.globals.get(\"leg_1_start_datetime\"),\r",
							"        pm.globals.get(\"leg_1_end_stop_place_ref\"),\r",
							"        pm.globals.get(\"leg_1_end_datetime\"),\r",
							"        pm.globals.get(\"leg_1_product_category_ref\"),\r",
							"        pm.globals.get(\"leg_1_product_category_name\"),\r",
							"        pm.globals.get(\"leg_1_product_category_short_name\"),\r",
							"        pm.globals.get(\"leg_1_vehicle_number\"),\r",
							"        pm.globals.get(\"leg_1_operator_code\")\r",
							"    )\r",
							"]);\r",
							"\r",
							"osdmAnonymousPassengerSpecifications(1);\r",
							"\r",
							"osdmOfferSearchCriteria(\r",
							"    pm.globals.get(\"offer_search_criteria_currency\"),\r",
							"    null,\r",
							"    [OfferPartType.RESERVATION],\r",
							"    null,\r",
							"    [pm.globals.get(\"offer_search_criteria_service_class\")],\r",
							"    [pm.globals.get(\"offer_search_criteria_travel_class\")],\r",
							"    null\r",
							");\r",
							"\r",
							"osdmFulfillmentOptions([\r",
							"    new FulfillmentOption(FulfillmentOptionType.ETICKET, FulfillmentMediaType.PDF_A4)\r",
							"]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objectType\": \"OfferCollectionRequest\",\n    \"tripSpecifications\": {{offer_trip_specifications}},\n    \"anonymousPassengerSpecifications\": {{offer_passenger_specifications}},\n    \"offerSearchCriteria\": {{offer_search_criteria}},\n    \"requestedFulfillmentOptions\": {{offer_fulfillment_options}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/offers",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "02. Place Maps (BILETO)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var preSelection = jsonData.vehicleAvailability.preSelections[0];\r",
							"var coach = jsonData.vehicleAvailability.vehicle.coaches[0];\r",
							"pm.globals.set(\"preselected_coach\", preSelection.coach);\r",
							"pm.globals.set(\"preselected_place\", preSelection.place);\r",
							"pm.globals.set(\"layout_id\", coach.layoutId)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/availabilities/place-map?contextId={{offer_id}}&contextType=OFFER&resourceId={{reservation_id}}&resourceType=RESERVATION",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"availabilities",
						"place-map"
					],
					"query": [
						{
							"key": "contextId",
							"value": "{{offer_id}}"
						},
						{
							"key": "contextType",
							"value": "OFFER"
						},
						{
							"key": "resourceId",
							"value": "{{reservation_id}}"
						},
						{
							"key": "resourceType",
							"value": "RESERVATION"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "03. Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"pm.test('Successfully created booking', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.globals.set(\"booking_id\", jsonData.booking.id);\r",
							"pm.globals.set(\"passenger_id\", jsonData.booking.passengers[0].id);\r",
							"pm.globals.set(\"valid_until_booked_offers\", jsonData.booking.bookedOffers[0].reservations[0].validUntil)\r",
							"\r",
							"validateBookingResponse(\r",
							"JSON.parse(pm.globals.get(OFFER.PASSENGER_SPECIFICATIONS)), \r",
							"JSON.parse(pm.globals.get(OFFER.SEARCH_CRITERIA)), \r",
							"pm.globals.get(OFFER.FULFILLMENT_OPTIONS), \r",
							"pm.globals.get(\"offers\"),\r",
							"pm.globals.get(\"offer_id\"),\r",
							"jsonData.booking,  \r",
							"pm.globals.get(\"SCENARIO_TYPE\"),\r",
							"\"PREBOOKED\");\r",
							"\r",
							"displayBookingResponse(jsonData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');\r",
							"console.log(\"Executing request : \" + pm.info.requestName);\r",
							"\r",
							"pm.globals.set(\"booking_external_ref\", uuid.v4());\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"offers\": [\r\n{\r\n            \"offerId\": \"{{offer_id}}\",\r\n            \"placeSelections\": [\r\n                {\r\n                    \"reservationId\": \"{{reservation_id}}\",\r\n                    \"places\": [\r\n                        {\r\n                            \"coachNumber\": \"{{preselected_coach}}\",\r\n                            \"placeNumber\": \"{{preselected_place}}\",\r\n                            \"passengerRef\": \"{{passenger_specification_1_external_ref}}\"\r\n                        }\r\n                    ],\r\n                    \"tripLegCoverage\" : {\r\n                        \"tripId\": \"{{trip_id}}\",\r\n                        \"legId\" : \"{{leg_id}}\"\r\n                    }\r\n                }\r\n            ],\r\n            \"passengerRefs\": [\r\n                \"{{passenger_specification_1_external_ref}}\"\r\n            ]\r\n        }\r\n    ],\r\n    \"purchaser\": {\r\n        \"detail\": {\r\n            \"firstName\": \"Pur\",\r\n            \"lastName\": \"Chaser\",\r\n            \"email\": \"yourusername@example.com\",\r\n            \"phoneNumber\": \"0612345678\"\r\n        }\r\n    },\r\n    \"passengerSpecifications\": [\r\n        {\r\n            \"externalRef\": \"{{passenger_specification_1_external_ref}}\",\r\n            \"dateOfBirth\": \"1996-01-01\",\r\n            \"type\": \"PERSON\",\r\n            \"email\": \"tim@sqills.com\"\r\n        }\r\n    ],\r\n    \"externalRef\": \"{{booking_external_ref}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "04. Fulfillments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"// Verify whether the correct status code is returned\r",
							"pm.test(\"Status code is 200 or 202\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"fulfillments_id\", jsonData.fulfillments[0].id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}/fulfillments",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}",
						"fulfillments"
					]
				}
			},
			"response": []
		},
		{
			"name": "05. Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"// Verify whether the correct status code is returned\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"checkFulFilledBooking(\r",
							"jsonData.booking,\r",
							"pm.globals.get(\"offer\"),\r",
							"\"FULFILLED\");\r",
							"\r",
							"displayFulFilledBookig(jsonData);\r",
							"\r",
							"// New set\r",
							"pm.globals.set(\"booking_confirmedPrice\", jsonData.booking.confirmedPrice);\r",
							"\r",
							"// New test\r",
							"pm.test(\"Verify fulfillment ID\", function () {\r",
							"    var fulfillmentsId = pm.globals.get(\"fulfillments_id\");\r",
							"    pm.expect(jsonData.booking.fulfillments[0].id).to.eql(fulfillmentsId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "06. Refund Offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Évaluer les helpers globaux",
							"eval(globals.osdmHelpers);",
							"",
							"// Analyser la réponse JSON",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.globals.set(\"valid_until_refund_offers\", jsonData.refundOffers[0].validUntil)",
							"",
							"pm.test(\"Response has a refundOfferId\", function () {",
							"    pm.expect(pm.response.json().refundOffers).to.not.be.empty;",
							"    pm.globals.set(\"refund_id\", jsonData.refundOffers[0].id);",
							"});",
							"",
							"validateRefundResponse(jsonData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);\r",
							"\r",
							"function requestRefundOffersBody(fulfillmentIds, overruleCode, refundDate) {\r",
							"    var body = {\r",
							"        fulfillmentIds: [fulfillmentIds]\r",
							"    };\r",
							"     if (overruleCode !== null) {\r",
							"        body.overruleCode = overruleCode;\r",
							"    }\r",
							"    if (refundDate !== null) {\r",
							"        body.refundDate = refundDate;\r",
							"    }\r",
							"    return body;\r",
							"}\r",
							"\r",
							"var fulfillmentIds = pm.globals.get('fulfillments_id');\r",
							"var overruleCode = pm.globals.get('SCENARIO_0_refundOverruleCode');\r",
							"var refundDate = pm.globals.get('refundDate') || null;\r",
							"\r",
							"var requestRefundOffersBody = requestRefundOffersBody(fulfillmentIds, overruleCode, refundDate);\r",
							"\r",
							"pm.globals.set('requestRefundOffersBody', JSON.stringify(requestRefundOffersBody));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type2",
						"value": "application/json;version={{osdm-version}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{requestRefundOffersBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}/refund-offers",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}",
						"refund-offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Skipped] 8. Refund Offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify whether the correct status code is returned",
							"pm.test(\"Status code is 501 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([501, 200]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}/refund-offers/{{refund_id}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}",
						"refund-offers",
						"{{refund_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "07. Booking before Patch Refund",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validateGetBookingResponseBeforeRefund(jsonData);",
							"",
							"// New set",
							"pm.globals.set(\"refund_refundAmount\", jsonData.booking.bookedOffers[0].reservations[0].refundAmount);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}?embed=ALL",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}"
					],
					"query": [
						{
							"key": "embed",
							"value": "ALL"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "08. Refund Offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validatePatchRefundResponse(jsonData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"CONFIRMED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}/refund-offers/{{refund_id}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}",
						"refund-offers",
						"{{refund_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "09. Booking after Patch Refund",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validateGetBookingResponseAfterRefund(jsonData);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}?embed=ALL",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}"
					],
					"query": [
						{
							"key": "embed",
							"value": "ALL"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "10. Refund Offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Évaluer les helpers globaux",
							"eval(globals.osdmHelpers);",
							"",
							"// Analyser la réponse JSON",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validatePatchRefundResponse(jsonData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"CONFIRMED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}/refund-offers/{{refund_id}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}",
						"refund-offers",
						"{{refund_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "11. Booking after Delete Refund",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validateGetBookingResponseAfterRefund(jsonData);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}?embed=ALL",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}"
					],
					"query": [
						{
							"key": "embed",
							"value": "ALL"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var scenario_type = \"RESERVATION\";",
					"",
					"function pad(number) {",
					"    return (number < 10) ? '0' + number : number;",
					"}",
					"",
					"function get_next_weekday (date) {",
					"    var tomorrow = new Date(date.setDate(date.getDate() + 1))",
					"    return tomorrow.getDay() % 6",
					"        ? tomorrow",
					"        : get_next_weekday(tomorrow)",
					"}",
					"",
					"var lib = \"\";",
					"var jsLibraries = [\"functions\", \"model\"];",
					"var dataFiles = [\"trips\"];",
					"",
					"pm.test(\"API base is available\", function () {",
					"    pm.expect(pm.environment.get(\"api_base\")).not.null;",
					"});",
					"",
					"pm.test(\"Library base is available\", function () {",
					"    pm.expect(pm.environment.get(\"library_base\")).not.null;",
					"});",
					"",
					"pm.test(\"Data base is available\", function () {",
					"    pm.expect(pm.environment.get(\"data_base\")).not.null;",
					"});",
					"",
					"function libGetter() {",
					"    pm.sendRequest({",
					"        url: pm.environment.get(\"library_base\") + jsLibraries[0] + \".js\",",
					"        method: 'GET',",
					"    }, function (err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            lib = lib.concat(res.text());",
					"            jsLibraries.shift();",
					"            if (jsLibraries[0]) {",
					"                libGetter();",
					"            }",
					"            else {",
					"                pm.globals.set(\"osdmHelpers\", lib);",
					"            }",
					"        }",
					"    });",
					"}",
					"",
					"function dataGetter() {",
					"/*",
					"    if(pm.environment.has('data_file')) {",
					"        console.log(\"data file was set, expecting running in postman\");",
					"        var res = pm.environment.get(\"data_file\");",
					"        var jsonData = JSON.parse(res);",
					"",
					"        var nextWeekday = get_next_weekday(new Date());",
					"        var nextWeekdayString = \"\" + nextWeekday.getUTCFullYear() + \"-\" + pad(nextWeekday.getUTCMonth() + 1) + \"-\" + pad(nextWeekday.getUTCDate());",
					"",
					"        var dataFileIndex = 0;",
					"        var dataFileLength = jsonData.length;",
					"        var foundCorrectDataSet = false;",
					"",
					"        while(foundCorrectDataSet==false && dataFileIndex<dataFileLength) {",
					"            if(jsonData[dataFileIndex].type==scenario_type) {",
					"                pm.globals.set(\"leg_1_start_stop_place_ref\", jsonData[dataFileIndex].origin);",
					"                pm.globals.set(\"leg_1_end_stop_place_ref\", jsonData[dataFileIndex].destination);",
					"                pm.globals.set(\"leg_1_start_datetime\", jsonData[dataFileIndex].start_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                pm.globals.set(\"leg_1_end_datetime\", jsonData[dataFileIndex].end_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                pm.globals.set(\"leg_1_vehicle_number\", jsonData[dataFileIndex].vehicle_number);",
					"                pm.globals.set(\"leg_1_operator_code\", jsonData[dataFileIndex].operator_code);",
					"",
					"                //new",
					"                pm.globals.set(\"offer_search_criteria_currency\", jsonData[dataFileIndex].currency);",
					"                pm.globals.set(\"offer_search_criteria_travel_class\", jsonData[dataFileIndex].travel_class);",
					"                pm.globals.set(\"offer_search_criteria_search_class\", jsonData[dataFileIndex].service_class);",
					"                pm.globals.set(\"SCENARIO_TYPE\",scenario_type);",
					"                pm.globals.set(\"LOGGING_TYPE\",\"FULL\");",
					"",
					"                // New set",
					"                pm.globals.set(\"overruleCode\", jsonData[dataFileIndex].overruleCode);",
					"",
					"                foundCorrectDataSet = true;",
					"                console.log(\"correct data set was found for this scenario type:\"+scenario_type);",
					"            }",
					"            dataFileIndex++;",
					"        }",
					"    } ",
					"*/   ",
					"    if(pm.environment.has('master_data_file')) {",
					"        console.log(\"Data file was set, expecting running in Postman\");",
					"        var res = pm.environment.get(\"master_data_file\");",
					"        var jsonData = JSON.parse(res);",
					"",
					"        var nextWeekday = get_next_weekday(new Date());",
					"        var nextWeekdayString = \"\" + nextWeekday.getUTCFullYear() + \"-\" + pad(nextWeekday.getUTCMonth() + 1) + \"-\" + pad(nextWeekday.getUTCDate());",
					"",
					"        var dataFileIndex = 0;",
					"        var scenarios = jsonData.scenarios;",
					"        var tripRequirements = jsonData.tripRequirements;",
					"        var passengersList = jsonData.passengers_list;",
					"",
					"        // Iterate through all scenarios",
					"        scenarios.forEach(function(scenario, index) {",
					"            if(scenario.type == scenario_type) {",
					"                pm.globals.set(\"SCENARIO_\" + index + \"_code\", scenario.code);",
					"                pm.globals.set(\"SCENARIO_\" + index + \"_currency\", scenario.currency);",
					"                pm.globals.set(\"SCENARIO_\" + index + \"_service_class\", scenario.service_class);",
					"                pm.globals.set(\"SCENARIO_\" + index + \"_travel_class\", scenario.travel_class);",
					"                pm.globals.set(\"SCENARIO_\" + index + \"_refundOverruleCode\", scenario.refundOverruleCode);",
					"                pm.globals.set(\"SCENARIO_\" + index + \"_tripRequirementId\", scenario.tripRequirementId);",
					"                pm.globals.set(\"SCENARIO_\" + index + \"_passengersListId\", scenario.passengersListId);",
					"                console.log(\"Set scenario variables for scenario index \" + index);",
					"            }",
					"        });",
					"",
					"        // Iterate through all tripRequirements",
					"        tripRequirements.forEach(function(tripReq, index) {",
					"            pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_id\", tripReq.id);",
					"            pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_tripType\", tripReq.tripType);",
					"            ",
					"            if (tripReq.legs) {",
					"                // If there are legs inside the tripRequirement",
					"                tripReq.legs.forEach(function(leg, legIndex) {",
					"                    pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_LEG_\" + legIndex + \"_origin\", leg.origin);",
					"                    pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_LEG_\" + legIndex + \"_destination\", leg.destination);",
					"                    pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_LEG_\" + legIndex + \"_start_datetime\", leg.start_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                    pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_LEG_\" + legIndex + \"_end_datetime\", leg.end_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                    pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_LEG_\" + legIndex + \"_vehicle_number\", leg.vehicle_number);",
					"                    pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_LEG_\" + legIndex + \"_operator_code\", leg.operator_code);",
					"                    console.log(\"Set leg variables for trip requirement index \" + index + \" leg index \" + legIndex);",
					"                });",
					"            } else if (tripReq.trip) {",
					"                // If there is only one trip in tripRequirement",
					"                var trip = tripReq.trip;",
					"                pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_TRIP_origin\", trip.origin);",
					"                pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_TRIP_destination\", trip.destination);",
					"                pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_TRIP_start_datetime\", trip.start_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_TRIP_end_datetime\", trip.end_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_TRIP_vehicle_number\", trip.vehicle_number);",
					"                pm.globals.set(\"TRIP_REQUIREMENT_\" + index + \"_TRIP_operator_code\", trip.operator_code);",
					"                console.log(\"Set trip variables for trip requirement index \" + index);",
					"            }",
					"        });",
					"",
					"        // Iterate through all passengers_list",
					"        passengersList.forEach(function(passengerList, listIndex) {",
					"            pm.globals.set(\"PASSENGERS_LIST_\" + listIndex + \"_id\", passengerList.id);",
					"            passengerList.passengers.forEach(function(passenger, passengerIndex) {",
					"                pm.globals.set(\"PASSENGERS_LIST_\" + listIndex + \"_PASSENGER_\" + passengerIndex + \"_reference\", passenger.reference);",
					"                pm.globals.set(\"PASSENGERS_LIST_\" + listIndex + \"_PASSENGER_\" + passengerIndex + \"_age\", passenger.age);",
					"                if (passenger.date_of_birth) {",
					"                    pm.globals.set(\"PASSENGERS_LIST_\" + listIndex + \"_PASSENGER_\" + passengerIndex + \"_date_of_birth\", passenger.date_of_birth);",
					"                }",
					"                pm.globals.set(\"PASSENGERS_LIST_\" + listIndex + \"_PASSENGER_\" + passengerIndex + \"_type\", passenger.type);",
					"                console.log(\"Set passenger variables for passenger list index \" + listIndex + \" passenger index \" + passengerIndex);",
					"            });",
					"        });",
					"",
					"        // Optional: Set global variables for scenario_type and logging",
					"        pm.globals.set(\"SCENARIO_TYPE\", scenario_type);",
					"        pm.globals.set(\"LOGGING_TYPE\", \"FULL\");",
					"",
					"        console.log(\"Finished setting global variables.\");",
					"    } else {",
					"        console.log(\"data file was not set, expecting running in runner\");",
					"        pm.sendRequest({",
					"            url: pm.environment.get(\"data_base\"),",
					"            method: 'GET',",
					"        }, function (err, res) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                console.log(res);",
					"                var jsonData = JSON.parse(res.text());",
					"                console.log(jsonData);",
					"",
					"                var nextWeekday = get_next_weekday(new Date());",
					"                var nextWeekdayString = \"\" + nextWeekday.getUTCFullYear() + \"-\" + pad(nextWeekday.getUTCMonth() + 1) + \"-\" + pad(nextWeekday.getUTCDate());",
					"",
					"                var dataFileIndex = 0;",
					"                var dataFileLength = jsonData.length;",
					"                var foundCorrectDataSet = false;",
					"",
					"                while(foundCorrectDataSet==false && dataFileIndex<dataFileLength) {",
					"                    if(jsonData[dataFileIndex].type==scenario_type) {",
					"",
					"                        pm.globals.set(\"leg_1_start_stop_place_ref\", jsonData[dataFileIndex].origin);",
					"                        pm.globals.set(\"leg_1_end_stop_place_ref\", jsonData[dataFileIndex].destination);",
					"                        pm.globals.set(\"leg_1_start_datetime\", jsonData[dataFileIndex].start_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                        pm.globals.set(\"leg_1_end_datetime\", jsonData[dataFileIndex].end_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                        pm.globals.set(\"leg_1_vehicle_number\", jsonData[dataFileIndex].vehicle_number);",
					"                        pm.globals.set(\"leg_1_operator_code\", jsonData[dataFileIndex].operator_code);",
					"                        //new",
					"                        pm.globals.set(\"offer_search_criteria_currency\", jsonData[dataFileIndex].currency);",
					"                        pm.globals.set(\"offer_search_criteria_travel_class\", jsonData[dataFileIndex].travel_class);",
					"                        pm.globals.set(\"offer_search_criteria_search_class\", jsonData[dataFileIndex].service_class);",
					"                        pm.globals.set(\"SCENARIO_TYPE\",scenario_type);",
					"                        pm.globals.set(\"LOGGING_TYPE\",\"NONE\");",
					"",
					"                        foundCorrectDataSet = true;",
					"                        console.log(\"correct data set was found for this scenario type:\"+scenario_type);",
					"                    }",
					"                    dataFileIndex++;",
					"                    ",
					"                }",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"// Cannot check exact URL as the endpoint path varies among different API vendors",
					"if (request.url.includes(\"/offers\")) {",
					"    console.log(\"Clearing the globals\")",
					"    ",
					"    pm.globals.clear();",
					"    ",
					"    setTimeout(2000);",
					"    ",
					"    if (!pm.globals.get(\"osdmHelpers\")) {",
					"        //pm.globals.set(\"osdmHelpers\", loadLibraries(jsLibraries));",
					"        libGetter();",
					"        dataGetter();",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "client_id",
			"value": "b9004d5e-8503-4bbb-9e79-aa1e8d2cfcc4",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "a23a0024-8d4f-4b97-a8e4-e475e7ce2380",
			"type": "string"
		}
	]
}
{
	"info": {
		"_postman_id": "ff4d3c50-8243-4860-b071-0961e50db629",
		"name": "OTST_TS_OB_RFND_5_ReasonCode",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14251770"
	},
	"item": [
		{
			"name": "01. Get Offer (offerSearchCriteria)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"pm.test('Successfully received offers', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"var offer = jsonData.offers[0];",
							"validateOfferConformsToOfferSearchCriteria(offer);",
							"",
							"validateOfferResponse(",
							"JSON.parse(pm.globals.get(OFFER.PASSENGER_SPECIFICATIONS)), ",
							"JSON.parse(pm.globals.get(OFFER.SEARCH_CRITERIA)), ",
							"pm.globals.get(OFFER.FULFILLMENT_OPTIONS), ",
							"jsonData.offers, ",
							"jsonData.trips, ",
							"pm.globals.get(\"SCENARIO_TYPE\"));",
							"",
							"displayOfferResponse(jsonData);",
							"",
							"//determine the flow",
							"if(pm.globals.get(\"requiresPlaceSelection\")==true) {",
							"    var reservationOfferPart = offer.reservationOfferParts[0];",
							"    pm.globals.set(\"reservationId\", reservationOfferPart.id);",
							"} else {",
							"    validationLogger(\"skipping Get Place Maps for Reservation of Offer\");",
							"    pm.execution.setNextRequest(\"03. Create a Booking\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"console.log(\"Executing request : \" + pm.info.requestName);\r",
							"buildOfferCollectionRequest();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{OfferCollectionRequest}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/offers",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "02. Get Place Maps for Reservation of Offer (Bileto env))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var preSelection = jsonData.vehicleAvailability.preSelections[0];\r",
							"var coach = jsonData.vehicleAvailability.vehicle.coaches[0];\r",
							"pm.globals.set(\"preselectedCoach\", preSelection.coach);\r",
							"pm.globals.set(\"preselectedPlace\", preSelection.place);\r",
							"pm.globals.set(\"layoutId\", coach.layoutId)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/availabilities/place-map?contextId={{offerId}}&contextType=OFFER&resourceId={{reservationId}}&resourceType=RESERVATION",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"availabilities",
						"place-map"
					],
					"query": [
						{
							"key": "contextId",
							"value": "{{offerId}}"
						},
						{
							"key": "contextType",
							"value": "OFFER"
						},
						{
							"key": "resourceId",
							"value": "{{reservationId}}"
						},
						{
							"key": "resourceType",
							"value": "RESERVATION"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "03. Create a Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.globals.set(\"bookingId\", jsonData.booking.id);\r",
							"pm.globals.set(\"passengerId\", jsonData.booking.passengers[0].id);\r",
							"\r",
							"pm.test('Successfully created booking', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"validateBookingResponse(\r",
							"JSON.parse(pm.globals.get(OFFER.PASSENGER_SPECIFICATIONS)), \r",
							"JSON.parse(pm.globals.get(OFFER.SEARCH_CRITERIA)), \r",
							"pm.globals.get(OFFER.FULFILLMENT_OPTIONS), \r",
							"pm.globals.get(\"offers\"),\r",
							"pm.globals.get(\"offerId\"),\r",
							"jsonData.booking,  \r",
							"pm.globals.get(\"ScenarioType\"),\r",
							"\"PREBOOKED\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"console.log(\"Executing request : \" + pm.info.requestName);\r",
							"buildBookingRequest();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{BookingRequest}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "04. Passenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"capturePassengerData(jsonData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}/passengers/{{passengerId}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}",
						"passengers",
						"{{passengerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "05. Passenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"validatePassengerData(jsonData, isPatchResponse = true);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{passengerId}}\",\r\n  \"summary\": \"string\",\r\n  \"externalRef\": \"{{passengerSpecification1ExternalRef}}\",\r\n  \"dateOfBirth\": \"{{newDateOfBirth}}\",\r\n  \"type\": \"PERSON\",\r\n  \"cards\": [\r\n    {\r\n      \"code\": \"string\",\r\n      \"number\": \"string\",\r\n      \"issuer\": \"string\",\r\n      \"type\": \"LOYALTY_CARD\"\r\n    }\r\n  ],\r\n  \"gender\": \"MALE\",\r\n  \"detail\": {\r\n    \"summary\": \"string\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"firstFamilyName\": \"Diaz\",\r\n    \"secondFamilyName\": \"Lopez\",\r\n    \"contact\": {\r\n      \"summary\": \"string\",\r\n      \"preferredLanguage\": \"string\",\r\n      \"email\": \"{{newEmail}}\",\r\n      \"phoneNumber\": \"{{newPhoneNumber}}\",\r\n      \"address\": \"string\"\r\n    }\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}/passengers/{{passengerId}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}",
						"passengers",
						"{{passengerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "06. Passenger after Patch Passenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"validatePassengerData(jsonData, isPatchResponse = false);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}/passengers/{{passengerId}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}",
						"passengers",
						"{{passengerId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "07. Get Booking before Fulfillments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"checkFulFilledBooking(\r",
							"jsonData.booking,\r",
							"pm.globals.get(\"offer\"),\r",
							"\"PREBOOKED\");\r",
							"\r",
							"displayFulFilledBooking(jsonData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "08. Obtaining Fulfillments from Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Status code is 200 or 202\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"\r",
							"if(pm.response.code==200){\r",
							"    pm.globals.set(\"fulfillmentsId\", jsonData.fulfillments[0].id);\r",
							"} else {\r",
							"    pm.globals.unset(\"fulfillmentsId\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}/fulfillments",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}",
						"fulfillments"
					]
				}
			},
			"response": []
		},
		{
			"name": "09. Get Booking after Fulfillments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"checkFulFilledBooking(\r",
							"jsonData.booking,\r",
							"pm.globals.get(\"offer\"),\r",
							"\"CONFIRMED\",\r",
							"\"FULFILLED\");\r",
							"\r",
							"if(pm.globals.get(\"fulfillmentsId\")==undefined) {\r",
							"    pm.globals.set(\"fulfillmentsId\", jsonData.booking.fulfillments[0].id);\r",
							"    pm.environment.set(\"fulfillmentsId\", jsonData.booking.fulfillments[0].id);\r",
							"}\r",
							"\r",
							"displayFulFilledBooking(jsonData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "10. Refund Offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"validateRefundOffersResponse(jsonData, isPatchResponse=false);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"console.log(\"Executing request : \" + pm.info.requestName);\r",
							"\r",
							"requestRefundOffersBody();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type2",
						"value": "application/json;version={{osdm-version}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{requestRefundOffersBodyData}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}/refund-offers",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}",
						"refund-offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "11. Refund Offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"var jsonData = JSON.parse(responseBody);",
							"validateRefundOffer(jsonData.refundOffer, \"PROPOSED\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}/refund-offers/{{refundId}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}",
						"refund-offers",
						"{{refundId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "12. Get Booking before Patch Refund",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validateBookingResponseRefund(jsonData, refundType = \"post\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}?embed=ALL",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}"
					],
					"query": [
						{
							"key": "embed",
							"value": "ALL"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "13. Patch Refund Offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validateRefundOffersResponse(jsonData, isPatchResponse=true);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"CONFIRMED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}/refund-offers/{{refundId}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}",
						"refund-offers",
						"{{refundId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "14. Get Booking after Patch Refund",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validateBookingResponseRefund(jsonData, refundType = \"patch\");",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}?embed=ALL",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}"
					],
					"query": [
						{
							"key": "embed",
							"value": "ALL"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "15. Refund Offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}/refund-offers/{{refundId}}",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}",
						"refund-offers",
						"{{refundId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "16. Booking after Delete Refund",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"validateBookingResponseRefund(jsonData, refundType=\"delete\");",
							"//validateBookingResponseRefundDelete(jsonData, afterRefund=true);",
							"//Maybe 3rd argument ? (before after delete)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Executing request : \" + pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{bookingId}}?embed=ALL",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}"
					],
					"query": [
						{
							"key": "embed",
							"value": "ALL"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/*",
					"Copyright UIC, Union Internationale des Chemins de fer",
					"Licensed under the Apache License, Version 2.0 (the \"License\");",
					"you may not use this file except in compliance with the License.",
					"You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0",
					"",
					"Unless required by applicable law or agreed to in writing, software",
					"distributed under the License is distributed on an \"AS IS\" BASIS,",
					"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
					"See the License for the specific language governing permissions and",
					"limitations under the License.",
					"",
					"No reproduction nor distribution shall be allowed without the following notice",
					"“This material is copyrighted by UIC, Union Internationale des Chemins de fer © 2023  – 2024 , OSDM is a trademark belonging to UIC, and any use of this trademark is strictly prohibited unless otherwise agreed by UIC.”",
					"*/",
					"",
					"var scenarioType = \"RESERVATION\";",
					"var scenarioCode = \"OTST_TS_OB_RFND_5_ReasonCode\";",
					"",
					"function pad(number) {",
					"    return (number < 10) ? '0' + number : number;",
					"}",
					"",
					"function get_next_weekday (date) {",
					"    var tomorrow = new Date(date.setDate(date.getDate() + 1))",
					"    return tomorrow.getDay() % 6",
					"        ? tomorrow",
					"        : get_next_weekday(tomorrow)",
					"}",
					"",
					"var lib = \"\";",
					"var jsLibraries = [\"functions\", \"model\"];",
					"",
					"pm.test(\"API base is available\", function () {",
					"    pm.expect(pm.environment.get(\"api_base\")).not.null;",
					"});",
					"",
					"pm.test(\"Library base is available\", function () {",
					"    pm.expect(pm.environment.get(\"library_base\")).not.null;",
					"});",
					"",
					"pm.test(\"Data base is available\", function () {",
					"    pm.expect(pm.environment.get(\"data_base\")).not.null;",
					"});",
					"",
					"function libGetter() {",
					"    pm.sendRequest({",
					"        url: pm.environment.get(\"library_base\") + jsLibraries[0] + \".js\",",
					"        method: 'GET',",
					"    }, function (err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            lib = lib.concat(res.text());",
					"            jsLibraries.shift();",
					"            if (jsLibraries[0]) {",
					"                libGetter();",
					"            }",
					"            else {",
					"                pm.globals.set(\"osdmHelpers\", lib);",
					"                eval(globals.osdmHelpers);",
					"                getScenarioData(scenarioType, scenarioCode);",
					"            }",
					"        }",
					"    });",
					"}",
					"",
					"// Cannot check exact URL as the endpoint path varies among different API vendors",
					"if (request.url.includes(\"/offers\")) {",
					"    console.log(\"Clearing the globals\")",
					"    ",
					"    pm.globals.clear();",
					"    ",
					"    setTimeout(2000);",
					"    ",
					"    if (!pm.globals.get(\"osdmHelpers\")) {",
					"        libGetter();",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "client_id",
			"value": "b9004d5e-8503-4bbb-9e79-aa1e8d2cfcc4",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "a23a0024-8d4f-4b97-a8e4-e475e7ce2380",
			"type": "string"
		}
	]
}
{
	"info": {
		"_postman_id": "75ca31d9-9cc0-4c3b-8982-a32edf9f3f4b",
		"name": "OTST Trip Specification - Offer Reservation Only",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17867548"
	},
	"item": [
		{
			"name": "01. Get Offer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"osdmTripSpecification([\r",
							"    new TripLegDefinition(\r",
							"        pm.globals.get(\"leg_1_start_stop_place_ref\"),\r",
							"        pm.globals.get(\"leg_1_start_datetime\"),\r",
							"        pm.globals.get(\"leg_1_end_stop_place_ref\"),\r",
							"        pm.globals.get(\"leg_1_end_datetime\"),\r",
							"        pm.globals.get(\"leg_1_product_category_ref\"),\r",
							"        pm.globals.get(\"leg_1_product_category_name\"),\r",
							"        pm.globals.get(\"leg_1_product_category_short_name\"),\r",
							"        pm.globals.get(\"leg_1_vehicle_number\"),\r",
							"        pm.globals.get(\"leg_1_operator_code\")\r",
							"    )\r",
							"]);\r",
							"\r",
							"osdmAnonymousPassengerSpecifications(1);\r",
							"\r",
							"osdmOfferSearchCriteria(\r",
							"    pm.globals.get(OFFER.SEARCH_CRITERIA_CURRENCY),\r",
							"    null,\r",
							"    [OfferPartType.RESERVATION],\r",
							"    null,\r",
							"    [ServiceClassType.STANDARD],\r",
							"    [TravelClass.SECOND],\r",
							"    null\r",
							");\r",
							"\r",
							"osdmFulfillmentOptions([\r",
							"    new FulfillmentOption(FulfillmentOptionType.ETICKET, FulfillmentMediaType.PDF_A4)\r",
							"]);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"pm.test('Successfully received offers', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test('Got single offer', function () {",
							"    pm.expect(jsonData.offers).to.have.lengthOf(1);",
							"});",
							"",
							"var offer = jsonData.offers[0];",
							"",
							"validateOfferConformsToOfferSearchCriteria(offer);",
							"",
							"pm.globals.set(\"offer_id\", offer.offerId);",
							"pm.globals.set(\"offers\", jsonData.offers);",
							"",
							"validateOfferResponse(",
							"JSON.parse(pm.globals.get(OFFER.PASSENGER_SPECIFICATIONS)), ",
							"JSON.parse(pm.globals.get(OFFER.SEARCH_CRITERIA)), ",
							"pm.globals.get(OFFER.FULFILLMENT_OPTIONS), ",
							"jsonData.offers, ",
							"jsonData.trips, ",
							"pm.globals.get(\"SCENARIO_TYPE\"));",
							"",
							"var reservationOfferPart = offer.reservationOfferParts[0];",
							"pm.globals.set(\"reservation_id\", reservationOfferPart.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objectType\": \"OfferCollectionRequest\",\n    \"tripSpecifications\": {{offer_trip_specifications}},\n    \"anonymousPassengerSpecifications\": {{offer_passenger_specifications}},\n    \"offerSearchCriteria\": {{offer_search_criteria}},\n    \"requestedFulfillmentOptions\": {{offer_fulfillment_options}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/offers",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "02. Get Place Maps for Reservation of Offer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var preSelection = jsonData.vehicleAvailability.preSelections[0];\r",
							"var coach = jsonData.vehicleAvailability.vehicle.coaches[0];\r",
							"pm.globals.set(\"preselected_coach\", preSelection.coach);\r",
							"pm.globals.set(\"preselected_place\", preSelection.place);\r",
							"pm.globals.set(\"layout_id\", coach.layoutId)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/availabilities/place-map?contextId={{offer_id}}&contextType=OFFER&resourceId={{reservation_id}}&resourceType=RESERVATION",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"availabilities",
						"place-map"
					],
					"query": [
						{
							"key": "contextId",
							"value": "{{offer_id}}"
						},
						{
							"key": "contextType",
							"value": "OFFER"
						},
						{
							"key": "resourceId",
							"value": "{{reservation_id}}"
						},
						{
							"key": "resourceType",
							"value": "RESERVATION"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "03. Create a Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.globals.set(\"booking_id\", jsonData.booking.id);\r",
							"pm.globals.set(\"passenger_id\", jsonData.booking.passengers[0].id);\r",
							"\r",
							"pm.test('Successfully created booking', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"validateBookingResponse(\r",
							"JSON.parse(pm.globals.get(OFFER.PASSENGER_SPECIFICATIONS)), \r",
							"JSON.parse(pm.globals.get(OFFER.SEARCH_CRITERIA)), \r",
							"pm.globals.get(OFFER.FULFILLMENT_OPTIONS), \r",
							"pm.globals.get(\"offers\"),\r",
							"pm.globals.get(\"offer_id\"),\r",
							"jsonData.booking,  \r",
							"pm.globals.get(\"SCENARIO_TYPE\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');\r",
							"\r",
							"pm.globals.set(\"booking_external_ref\", uuid.v4());\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"offers\": [\r\n        {\r\n            \"offerId\": \"{{offer_id}}\",\r\n            \"placeSelections\": [\r\n                {\r\n                    \"reservationId\": \"{{reservation_id}}\",\r\n                    \"places\": [\r\n                        {\r\n                            \"coachNumber\": \"{{preselected_coach}}\",\r\n                            \"placeNumber\": \"{{preselected_place}}\",\r\n                            \"passengerRef\": \"{{passenger_specification_1_external_ref}}\"\r\n                        }\r\n                    ],\r\n                    \"tripLegCoverage\" : {\r\n                        \"tripId\": \"{{trip_id}}\",\r\n                        \"legId\" : \"{{leg_id}}\"\r\n                    }\r\n                }\r\n            ],\r\n            \"passengerRefs\": [\r\n                \"{{passenger_specification_1_external_ref}}\"\r\n            ]\r\n        }\r\n    ],\r\n    \"passengerSpecifications\": [\r\n        {\r\n            \"externalRef\": \"{{passenger_specification_1_external_ref}}\",\r\n            \"dateOfBirth\": \"1996-01-01\",\r\n            \"type\": \"PERSON\"\r\n        }\r\n    ],\r\n    \"externalRef\": \"{{booking_external_ref}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "04. Obtaining Fulfillments from Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Fulfillment for one booking obtained\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var fulfillments = jsonData.fulfillments;\r",
							"    pm.expect(fulfillments.length).to.eql(1);\r",
							"\r",
							"    pm.globals.set(\"fulfillment_id\", jsonData.fulfillments[0].id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}/fulfillments",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}",
						"fulfillments"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var scenario_type = \"RESERVATION\";",
					"",
					"",
					"function pad(number) {",
					"    return (number < 10) ? '0' + number : number;",
					"}",
					"",
					"function get_next_weekday (date) {",
					"    var tomorrow = new Date(date.setDate(date.getDate() + 1))",
					"    return tomorrow.getDay() % 6",
					"        ? tomorrow",
					"        : get_next_weekday(tomorrow)",
					"}",
					"",
					"var lib = \"\";",
					"var jsLibraries = [\"functions\", \"model\"];",
					"var dataFiles = [\"trips\"];",
					"",
					"pm.test(\"API base is available\", function () {",
					"    pm.expect(pm.environment.get(\"api_base\")).not.null;",
					"});",
					"",
					"pm.test(\"Library base is available\", function () {",
					"    pm.expect(pm.environment.get(\"library_base\")).not.null;",
					"});",
					"",
					"pm.test(\"Data base is available\", function () {",
					"    pm.expect(pm.environment.get(\"data_base\")).not.null;",
					"});",
					"",
					"function libGetter() {",
					"    pm.sendRequest({",
					"        url: pm.environment.get(\"library_base\") + jsLibraries[0] + \".js\",",
					"        method: 'GET',",
					"    }, function (err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            lib = lib.concat(res.text());",
					"            jsLibraries.shift();",
					"            if (jsLibraries[0]) {",
					"                libGetter();",
					"            }",
					"            else {",
					"                pm.globals.set(\"osdmHelpers\", lib);",
					"            }",
					"        }",
					"    });",
					"}",
					"",
					"function dataGetter() {",
					"    if(pm.environment.has('data_file')) {",
					"        console.log(\"data file was set, expecting running in postman\");",
					"        var res = pm.environment.get(\"data_file\");",
					"        var jsonData = JSON.parse(res);",
					"",
					"        var nextWeekday = get_next_weekday(new Date());",
					"        var nextWeekdayString = \"\" + nextWeekday.getUTCFullYear() + \"-\" + pad(nextWeekday.getUTCMonth() + 1) + \"-\" + pad(nextWeekday.getUTCDate());",
					"",
					"        var dataFileIndex = 0;",
					"        var dataFileLength = jsonData.length;",
					"        var foundCorrectDataSet = false;",
					"",
					"        while(foundCorrectDataSet==false && dataFileIndex<dataFileLength) {",
					"            if(jsonData[dataFileIndex].type==scenario_type) {",
					"                pm.globals.set(\"leg_1_start_stop_place_ref\", jsonData[dataFileIndex].origin);",
					"                pm.globals.set(\"leg_1_end_stop_place_ref\", jsonData[dataFileIndex].destination);",
					"                pm.globals.set(\"leg_1_start_datetime\", jsonData[dataFileIndex].start_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                pm.globals.set(\"leg_1_end_datetime\", jsonData[dataFileIndex].end_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                pm.globals.set(\"leg_1_vehicle_number\", jsonData[dataFileIndex].vehicle_number);",
					"                pm.globals.set(\"leg_1_operator_code\", jsonData[dataFileIndex].operator_code);",
					"",
					"                //new",
					"                pm.globals.set(\"offer_search_criteria_currency\", jsonData[dataFileIndex].currency);",
					"                pm.globals.set(\"offer_search_criteria_travel_class\", jsonData[dataFileIndex].travel_class);",
					"                pm.globals.set(\"offer_search_criteria_search_class\", jsonData[dataFileIndex].service_class);",
					"                pm.globals.set(\"SCENARIO_TYPE\",scenario_type);",
					"                pm.globals.set(\"LOGGING_TYPE\",\"FULL\");",
					"",
					"                foundCorrectDataSet = true;",
					"                console.log(\"correct data set was found for this scenario type:\"+scenario_type);",
					"            }",
					"            dataFileIndex++;",
					"        }",
					"    } else {",
					"        console.log(\"data file was not set, expecting running in runner\");",
					"        pm.sendRequest({",
					"            url: pm.environment.get(\"data_base\"),",
					"            method: 'GET',",
					"        }, function (err, res) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                console.log(res);",
					"                var jsonData = JSON.parse(res.text());",
					"                console.log(jsonData);",
					"",
					"                var nextWeekday = get_next_weekday(new Date());",
					"                var nextWeekdayString = \"\" + nextWeekday.getUTCFullYear() + \"-\" + pad(nextWeekday.getUTCMonth() + 1) + \"-\" + pad(nextWeekday.getUTCDate());",
					"",
					"                var dataFileIndex = 0;",
					"                var dataFileLength = jsonData.length;",
					"                var foundCorrectDataSet = false;",
					"",
					"                while(foundCorrectDataSet==false && dataFileIndex<dataFileLength) {",
					"                    if(jsonData[dataFileIndex].type==scenario_type) {",
					"",
					"                        pm.globals.set(\"leg_1_start_stop_place_ref\", jsonData[dataFileIndex].origin);",
					"                        pm.globals.set(\"leg_1_end_stop_place_ref\", jsonData[dataFileIndex].destination);",
					"                        pm.globals.set(\"leg_1_start_datetime\", jsonData[dataFileIndex].start_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                        pm.globals.set(\"leg_1_end_datetime\", jsonData[dataFileIndex].end_datetime.replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"                        pm.globals.set(\"leg_1_vehicle_number\", jsonData[dataFileIndex].vehicle_number);",
					"                        pm.globals.set(\"leg_1_operator_code\", jsonData[dataFileIndex].operator_code);",
					"                        //new",
					"                        pm.globals.set(\"offer_search_criteria_currency\", jsonData[dataFileIndex].currency);",
					"                        pm.globals.set(\"offer_search_criteria_travel_class\", jsonData[dataFileIndex].travel_class);",
					"                        pm.globals.set(\"offer_search_criteria_search_class\", jsonData[dataFileIndex].service_class);",
					"                        pm.globals.set(\"SCENARIO_TYPE\",scenario_type);",
					"                        pm.globals.set(\"LOGGING_TYPE\",\"NONE\");",
					"",
					"                        foundCorrectDataSet = true;",
					"                        console.log(\"correct data set was found for this scenario type:\"+scenario_type);",
					"                    }",
					"                    dataFileIndex++;",
					"                    ",
					"                }",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"// Cannot check exact URL as the endpoint path varies among different API vendors",
					"if (request.url.includes(\"offers\")) {",
					"    console.log(\"Clearing the globals\")",
					"    ",
					"    pm.globals.clear();",
					"    ",
					"    setTimeout(2000);",
					"    ",
					"    if (!pm.globals.get(\"osdmHelpers\")) {",
					"        //pm.globals.set(\"osdmHelpers\", loadLibraries(jsLibraries));",
					"        libGetter();",
					"        dataGetter();",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
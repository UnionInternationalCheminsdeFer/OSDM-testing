{
	"info": {
		"_postman_id": "35c8b497-7abd-43e3-9e4c-8a47706c2f87",
		"name": "OTST Trip Specification-Offer Booking (Sqills)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01. Get Offer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);\r",
							"\r",
							"osdmTripSpecification([\r",
							"    new TripLegDefinition(\r",
							"        pm.globals.get(\"leg_1_start_stop_place_ref\"),\r",
							"        pm.globals.get(\"leg_1_start_datetime\"),\r",
							"        pm.globals.get(\"leg_1_end_stop_place_ref\"),\r",
							"        pm.globals.get(\"leg_1_end_datetime\"),\r",
							"        pm.globals.get(\"leg_1_product_category_ref\"),\r",
							"        pm.globals.get(\"leg_1_product_category_name\"),\r",
							"        pm.globals.get(\"leg_1_product_category_short_name\"),\r",
							"        pm.globals.get(\"leg_1_vehicle_number\"),\r",
							"        pm.globals.get(\"leg_1_operator_code\")\r",
							"    )\r",
							"]);\r",
							"\r",
							"osdmAnonymousPassengerSpecifications(1);\r",
							"\r",
							"osdmOfferSearchCriteria(\r",
							"    pm.globals.get(OFFER.SEARCH_CRITERIA_CURRENCY),\r",
							"    null,\r",
							"    [OfferPartType.RESERVATION],\r",
							"    null,\r",
							"    [ServiceClassType.STANDARD],\r",
							"    [TravelClass.SECOND],\r",
							"    null\r",
							");\r",
							"\r",
							"osdmFulfillmentOptions([\r",
							"    new FulfillmentOption(FulfillmentOptionType.ETICKET, FulfillmentMediaType.PDF_A4)\r",
							"]);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.osdmHelpers);",
							"",
							"pm.test('Successfully received offers', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"var offer = jsonData.offers[0];",
							"",
							"validateOfferConformsToOfferSearchCriteria(offer);",
							"",
							"pm.globals.set(\"offer_id\", offer.offerId);",
							"",
							"var reservationOfferPart = offer.reservationOfferParts[0];",
							"pm.globals.set(\"reservation_id\", reservationOfferPart.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objectType\": \"OfferCollectionRequest\",\n    \"tripSpecifications\": {{offer_trip_specifications}},\n    \"anonymousPassengerSpecifications\": {{offer_passenger_specifications}},\n    \"offerSearchCriteria\": {{offer_search_criteria}},\n    \"requestedFulfillmentOptions\": {{offer_fulfillment_options}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/offers",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "03. Create a Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.globals.set(\"booking_id\", jsonData.booking.id);\r",
							"pm.globals.set(\"passenger_id\", jsonData.booking.passengers[0].id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid');\r",
							"\r",
							"pm.globals.set(\"booking_external_ref\", uuid.v4());\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"offers\": [\r\n        {\r\n            \"offerId\": \"{{offer_id}}\",\r\n            \"passengerRefs\": [\r\n                \"{{passenger_specification_1_external_ref}}\"\r\n            ]\r\n        }\r\n    ],\r\n    \"purchaser\": {\r\n        \"detail\": {\r\n            \"firstName\": \"Pur\",\r\n            \"lastName\": \"Chaser\",\r\n            \"email\": \"yourusername@example.com\",\r\n            \"phoneNumber\": \"0612345678\"\r\n        }\r\n    },\r\n    \"passengerSpecifications\": [\r\n        {\r\n            \"externalRef\": \"{{passenger_specification_1_external_ref}}\",\r\n            \"dateOfBirth\": \"1996-01-01\",\r\n            \"type\": \"PERSON\",\r\n            \"email\": \"tim@sqills.com\"\r\n        }\r\n    ],\r\n    \"externalRef\": \"{{booking_external_ref}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base}}/bookings",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "04. Obtaining Fulfillments from Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify whether the correct status code is returned\r",
							"pm.test(\"Status code is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Access-Token",
						"value": "{{access_token}}",
						"description": "Legacy Authorization Header; remove for 2.0",
						"type": "text"
					},
					{
						"key": "Requestor",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base}}/bookings/{{booking_id}}/fulfillments",
					"host": [
						"{{api_base}}"
					],
					"path": [
						"bookings",
						"{{booking_id}}",
						"fulfillments"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"function pad(number) {",
					"    return (number < 10) ? '0' + number : number;",
					"}",
					"",
					"function get_next_weekday (date) {",
					"    var tomorrow = new Date(date.setDate(date.getDate() + 1))",
					"    return tomorrow.getDay() % 6",
					"        ? tomorrow",
					"        : get_next_weekday(tomorrow)",
					"}",
					"",
					"var lib = \"\";",
					"var jsLibraries = [\"functions\", \"model\"];",
					"var dataFiles = [\"trips\"];",
					"",
					"pm.test(\"API base is available\", function () {",
					"    pm.expect(pm.environment.get(\"api_base\")).not.null;",
					"});",
					"",
					"pm.test(\"Library base is available\", function () {",
					"    pm.expect(pm.environment.get(\"library_base\")).not.null;",
					"});",
					"",
					"pm.test(\"Data base is available\", function () {",
					"    pm.expect(pm.environment.get(\"data_base\")).not.null;",
					"});",
					"",
					"function libGetter() {",
					"    pm.sendRequest({",
					"        url: pm.environment.get(\"library_base\") + jsLibraries[0] + \".js\",",
					"        method: 'GET',",
					"    }, function (err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            lib = lib.concat(res.text());",
					"            jsLibraries.shift();",
					"            if (jsLibraries[0]) {",
					"                libGetter();",
					"            }",
					"            else {",
					"                pm.globals.set(\"osdmHelpers\", lib);",
					"            }",
					"        }",
					"    });",
					"}",
					"",
					"function dataGetter() {",
					"    pm.sendRequest({",
					"        url: pm.environment.get(\"data_base\"),",
					"        method: 'GET',",
					"    }, function (err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            const parse = require('csv-parse/lib/sync')",
					"            const records = parse(res.text(), {",
					"                skip_empty_lines: true,",
					"            });",
					"",
					"            console.log(records);",
					"",
					"            var record = records[0];",
					"            ",
					"            var nextWeekday = get_next_weekday(new Date());",
					"            var nextWeekdayString = \"\" + nextWeekday.getUTCFullYear() + \"-\" + pad(nextWeekday.getUTCMonth() + 1) + \"-\" + pad(nextWeekday.getUTCDate());",
					"",
					"            pm.globals.set(\"leg_1_start_stop_place_ref\", record[0]);",
					"            pm.globals.set(\"leg_1_end_stop_place_ref\", record[1]);",
					"            pm.globals.set(\"leg_1_start_datetime\", record[2].replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"            pm.globals.set(\"leg_1_end_datetime\", record[3].replace(\"%TRIP_DATE%\", nextWeekdayString));",
					"            pm.globals.set(\"leg_1_vehicle_number\", record[4]);",
					"            pm.globals.set(\"leg_1_operator_code\", record[5]);",
					"        }",
					"    });",
					"}",
					"",
					"// Cannot check exact URL as the endpoint path varies among different API vendors",
					"if (request.url.includes(\"offers\")) {",
					"    console.log(\"Clearing the globals\")",
					"    ",
					"    pm.globals.clear();",
					"    ",
					"    setTimeout(2000);",
					"    ",
					"    if (!pm.globals.get(\"osdmHelpers\")) {",
					"        //pm.globals.set(\"osdmHelpers\", loadLibraries(jsLibraries));",
					"        libGetter();",
					"        dataGetter();",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}